#---------------------------------------
# Control-M/Agent docker container
# Edited by
#       Daniel Companeetz - BMC Software
# Contributions by
#       Aaron Baldwin - BMC Software
#       Gal Gafni Chen - BMC Software
#---------------------------------------

###Tested with the following OSes
# ensure you do a
#   sudo docker pull rockylinux
#   sudo docker pull centos
# Using AlmaLinux (RHEL 8+ compatible)
FROM almalinux:latest

ARG AAPI_ENDPOINT
ARG AAPI_TOKEN
# AAPI_TOKEN is the Auth requirement for SaaS

### install basic packages
## Next line accelerates build by using deltarpm
RUN  dnf -y install drpm
RUN  dnf -y update
RUN  dnf -y install unzip \
        && dnf -y install sudo \
        && dnf -y install net-tools \
        && dnf -y install which \
        && dnf -y install wget \
        && dnf -y install psmisc

# install java 11
RUN  sudo dnf -y install java-11-openjdk \
        && java -version \
        && alternatives --config java <<< $(alternatives --config java <<< "" |grep java-11 | awk -F'[^0-9]*' '$0=$2')

# ENABLE STRACE IF NEEDED FOR TROUBLESHOOTING SIGNALING
# connect to container and use strace -p 1 to see signals arriving to process
RUN  dnf -y install strace

# add controlm user and root to sudoers list
RUN  useradd -d /home/controlm -p controlm -m controlm \
        && echo 'root ALL=(ALL) ALL' >> /etc/sudoers \
        && echo 'controlm ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

# add controlm endpoint
USER controlm
WORKDIR /home/controlm

# Install the Helix Control-M Automation API CLI
COPY ctm_cli_silent_install.xml .
RUN wget -qO /tmp/ctmagent_install.BIN https://bmc-prod-saas-agent-application-artifacts.s3.us-west-2.amazonaws.com/9.0.21.092/extracted/1833/root/apps/DEV/9.0.21.000/DR5V3.9.0.21.000_Linux-x86_64.BIN
RUN export BMC_INST_JAVA_HOME=/etc/alternatives/jre_11 \
        && chmod 755 /tmp/ctmagent_install.BIN \
        && /tmp/ctmagent_install.BIN -silent ctm_cli_silent_install.xml \
        && rm -rf /tmp/ctmagent_install.BIN


RUN source ~/.bashrc

# next line specific for saas
RUN ctm env saas::add endpoint https://$AAPI_ENDPOINT/automation-api $AAPI_TOKEN \
        && ctm env set endpoint

# provision controlm agent image
RUN     cd \
        && export BMC_INST_JAVA_HOME=/etc/alternatives/jre_11 \
        && ctm provision image Agent_CentOS.Linux

# Uncomment the images for the plugins needed
#RUN ctm provision image Databases_plugin.Linux
#RUN ctm provision image AWS_plugin.Linux
#RUN ctm provision image Azure_plugin.Linux
#RUN ctm provision image Hadoop_plugin.Linux
#RUN ctm provision image Informatica_plugin.Linux
#RUN ctm provision image MFT_plugin.Linux

# Keep the following SAP lines together. Uncomment if needed.
#RUN ctm provision image SAP_plugin.Linux \
#COPY ./sapjco3.jar /home/controlm/ctm/cm/SAP/exe/sapjco
#RUN sudo chown controlm:controlm /home/controlm/ctm/cm/SAP/exe/sapjco/sapjco3.jar \
#        && sudo chmod 775 /home/controlm/ctm/cm/SAP/exe/sapjco/sapjco3.jar

# enable controlm agent utilities
RUN echo "source /home/controlm/.bash_profile" >> /home/controlm/.bashrc

# Clean dnf cache to reduce image size
RUN sudo dnf clean all \
        && sudo rm -rf /var/cache/dnf

################ Specific for Helix Control-M actions
# Add patches as needed. Below are for on-prem as example.
#COPY PAKAI.9.0.20.201_Linux-x86_64_INSTALL.BIN  /tmp
#COPY PAKAI.9.0.20.203_Linux-x86_64_INSTALL.BIN  /tmp

#RUN sudo chmod 755 /tmp/PAKAI.9.0.20.201_Linux-x86_64_INSTALL.BIN
#RUN source /home/controlm/.bashrc \
#         && /tmp/PAKAI.9.0.20.201_Linux-x86_64_INSTALL.BIN -s
#RUN sudo chmod 755 /tmp/PAKAI.9.0.20.203_Linux-x86_64_INSTALL.BIN
#RUN source /home/controlm/.bashrc \
#         && /tmp/PAKAI.9.0.20.203_Linux-x86_64_INSTALL.BIN -s

#RUN sudo rm -f /tmp/PAKAI*

# Exposing Agent ports. Use range as not sure what will be used.
#    See run_register_controlm.sh to determine how that works
#EXPOSE 7000-8000

################ End of Specific for on-prem patches

### Keep these lines just before the end in case changes to the
###    run and decomm scripts are needed, to avoid re-build.
# copy run and register controlm agent script to container
# NOTE: if script changes, but not the docker file, the script will not be updated
COPY ./run_register_controlm.sh /home/controlm/
COPY ./deploy_test_jobs.json /home/controlm/
# give execute permissions to start/shut scripts
RUN  sudo chown controlm:controlm /home/controlm/*controlm.sh \
        && sudo chmod 775 /home/controlm/*controlm.sh

# CMD in exec mode (using []) is needed for signaling to work
# Signaling will ensure stopping the container deregister the agent
# use docker stop $container_id -t 60
# timeout is needed to ensure AAPI has time to process HG and agent removal
# docker stop default timeout is 10 sec and then a SIGKILL is sent.
CMD ["/home/controlm/run_register_controlm.sh"]
